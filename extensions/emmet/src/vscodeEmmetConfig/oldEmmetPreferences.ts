export type EmmetOldPreferences = {
	/**
	* Class name’s element separator.
	* @default "__"
	*/
	"bem.elementSeparator"?: string,

	/**
	* Class name’s modifier separator.
	* @default "_"
	*/
	"bem.modifierSeparator"?: string,

	/**
	* Symbol for describing short “block-element” notation. Class names prefixed with this symbol will be treated as element name for parent‘s block name. Each symbol instance traverses one level up in parsed tree for block name lookup. Empty value will disable short notation.
	* @default "-"
	*/
	"bem.shortElementPrefix"?: string,

	/**
	* Enable support of Can I Use database. When enabled, CSS abbreviation resolver will look at Can I Use database first before detecting		CSS properties that should be resolved
	* @default true
	*/
	"caniuse.enabled"?: boolean,

	/**
	* Browser era, as defined in Can I Use database.
	* @example e0 (current version), e1 (near future), e-2 (2 versions back) and so on.
	* @default "e-2"
	*/
	"caniuse.era"?: string,

	/**
	* A comma-separated list vendor identifiers (as described in Can I Use database) that should be supported		when resolving vendor-prefixed properties. Set value to all		to support all available properties
	* @default "all"
	*/
	"caniuse.vendors"?: string,

	/**
	* If set to true, all generated vendor-prefixed properties will be aligned by real property name.
	* @default false
	*/
	"css.alignVendor"?: boolean,

	/**
	* Automatically generate vendor-prefixed copies of expanded CSS property. By default, Emmet will generate vendor-prefixed properties only when you put dash before abbreviation (e.g. -bxsh). With this option enabled, you don’t need dashes before abbreviations: Emmet will produce vendor-prefixed properties for you.
	* @default true
	*/
	"css.autoInsertVendorPrefixes"?: string,

	/**
	* Indentation before closing brace of CSS rule. Some users prefere indented closing brace of CSS rule for better readability. This preference’s value will be automatically inserted before closing brace when user adds newline in newly created CSS rule (e.g. when “Insert formatted linebreak” action will be performed in CSS file). If you’re such user, you may want to write put a value like \n\t in this preference.
	* @default "\n"
	*/
	"css.closeBraceIndentation"?: string,

	/**
	* Letter case of color values generated by abbreviations with color (like c#0). Possible values are upper, lower and keep.
	* @default "keep"
	*/
	"css.color.case"?: string,

	/**
	* Should color values like #ffffff be shortened to #fff after abbreviation with color was expanded.
	* @default true
	*/
	"css.color.short"?: boolean,

	/**
	* Default unit for float values
	* @default "em"
	*/
	"css.floatUnit"?: string,

	/**
	* Enable fuzzy search among CSS snippet names. When enabled, every unknown snippet will be scored against available snippet names (not values or CSS properties!). The match with best score will be used to resolve snippet value. For example, with this preference enabled, the following abbreviations are equal: ov:h == ov-h == o-h == oh
	* @default true
	*/
	"css.fuzzySearch"?: boolean,

	/**
	* The minium score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches.
	* @default 0.3
	*/
	"css.fuzzySearchMinScore"?: number,

	/**
	* When gradient expanded outside CSS value context, it will produce properties with this name.
	* @default "background-image"
	*/
	"css.gradient.defaultProperty"?: string,

	/**
	* With this option enabled, CSS gradient generator will produce background-color property with gradient first color as fallback for old browsers.
	* @default false
	*/
	"css.gradient.fallback"?: boolean,

	/**
	* Generate gradient definition for old Webkit implementations
	* @default false
	*/
	"css.gradient.oldWebkit"?: boolean,

	/**
	* Do not output default direction definition in generated gradients.
	* @default true
	*/
	"css.gradient.omitDefaultDirection"?: boolean,

	/**
	* A comma-separated list of vendor-prefixes for which values should be generated.
	* @default "webkit, moz, o"
	*/
	"css.gradient.prefixes"?: string,

	/**
	* Default unit for integer values
	* @default "px"
	*/
	"css.intUnit"?: string,

	/**
	* A comma-separated list of keyword aliases, used in CSS abbreviation. Each alias should be defined as alias:keyword_name.
	* @default "a:auto, i:inherit, s:solid, da:dashed, do:dotted, t:transparent"
	*/
	"css.keywordAliases"?: string,

	/**
	* A comma-separated list of valid keywords that can be used in CSS abbreviations.
	* @default "auto, inherit, all"
	*/
	"css.keywords"?: string,

	/**
	* A comma-separated list of CSS properties that may have moz vendor prefix. This list is used to generate a list of prefixed properties when expanding -property abbreviations. Empty list means that all possible CSS values may have moz prefix.
	* @default "animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-inline-policy, binding, border-bottom-colors, border-image, border-left-colors, border-right-colors, border-top-colors, box-align, box-direction, box-flex, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-width, float-edge, font-feature-settings, font-language-override, force-broken-image-icon, hyphens, image-region, orient, outline-radius-bottomleft, outline-radius-bottomright, outline-radius-topleft, outline-radius-topright, perspective, perspective-origin, stack-sizing, tab-size, text-blink, text-decoration-color, text-decoration-line, text-decoration-style, text-size-adjust, transform, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-focus, user-input, user-modify, user-select, window-shadow, background-clip, border-radius"
	*/
	"css.mozProperties"?: string,

	/**
	* A comma-separated list of additional CSS properties for css.mozPreperties preference. You should use this list if you want to add or remove a few CSS properties to original set. To add a new property, simply write its name, to remove it, precede property with hyphen.For example, to add foo property and remove border-radius one, the preference value will look like this: foo, -border-radius.
	* @default ""
	*/
	"css.mozPropertiesAddon"?: string,

	/**
	* A comma-separated list of CSS properties that may have ms vendor prefix. This list is used to generate a list of prefixed properties when expanding -property abbreviations. Empty list means that all possible CSS values may have ms prefix.
	* @default "accelerator, backface-visibility, background-position-x, background-position-y, behavior, block-progression, box-align, box-direction, box-flex, box-line-progression, box-lines, box-ordinal-group, box-orient, box-pack, content-zoom-boundary, content-zoom-boundary-max, content-zoom-boundary-min, content-zoom-chaining, content-zoom-snap, content-zoom-snap-points, content-zoom-snap-type, content-zooming, filter, flow-from, flow-into, font-feature-settings, grid-column, grid-column-align, grid-column-span, grid-columns, grid-layer, grid-row, grid-row-align, grid-row-span, grid-rows, high-contrast-adjust, hyphenate-limit-chars, hyphenate-limit-lines, hyphenate-limit-zone, hyphens, ime-mode, interpolation-mode, layout-flow, layout-grid, layout-grid-char, layout-grid-line, layout-grid-mode, layout-grid-type, line-break, overflow-style, perspective, perspective-origin, perspective-origin-x, perspective-origin-y, scroll-boundary, scroll-boundary-bottom, scroll-boundary-left, scroll-boundary-right, scroll-boundary-top, scroll-chaining, scroll-rails, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-type, scroll-snap-x, scroll-snap-y, scrollbar-arrow-color, scrollbar-base-color, scrollbar-darkshadow-color, scrollbar-face-color, scrollbar-highlight-color, scrollbar-shadow-color, scrollbar-track-color, text-align-last, text-autospace, text-justify, text-kashida-space, text-overflow, text-size-adjust, text-underline-position, touch-action, transform, transform-origin, transform-origin-x, transform-origin-y, transform-origin-z, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-select, word-break, wrap-flow, wrap-margin, wrap-through, writing-mode"
	*/
	"css.msProperties"?: string,

	/**
	* A comma-separated list of additional CSS properties for css.msPreperties preference. You should use this list if you want to add or remove a few CSS properties to original set. To add a new property, simply write its name, to remove it, precede property with hyphen.For example, to add foo property and remove border-radius one, the preference value will look like this: foo, -border-radius.
	* @default ""
	*/
	"css.msPropertiesAddon"?: string,

	/**
	* A comma-separated list of CSS properties that may have o vendor prefix. This list is used to generate a list of prefixed properties when expanding -property abbreviations. Empty list means that all possible CSS values may have o prefix.
	* @default "dashboard-region, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, border-image, link, link-source, object-fit, object-position, tab-size, table-baseline, transform, transform-origin, transition, transition-delay, transition-duration, transition-property, transition-timing-function, accesskey, input-format, input-required, marquee-dir, marquee-loop, marquee-speed, marquee-style"
	*/
	"css.oProperties"?: string,

	/**
	* A comma-separated list of additional CSS properties for css.oPreperties preference. You should use this list if you want to add or remove a few CSS properties to original set. To add a new property, simply write its name, to remove it, precede property with hyphen.For example, to add foo property and remove border-radius one, the preference value will look like this: foo, -border-radius.
	* @default ""
	*/
	"css.oPropertiesAddon"?: string,

	/**
	* Defines a symbol that should be placed at the end of CSS property  when expanding CSS abbreviations.
	* @default ";"
	*/
	"css.propertyEnd"?: string,

	/**
	* Support IE6/7/8 opacity notation, e.g. filter:alpha(opacity=...).		Note that CSS3 and SVG also provides filter property so this option is disabled by default.
	* @default false
	*/
	"css.reflect.oldIEOpacity"?: boolean,

	/**
	* List of syntaxes that should be treated as CSS dialects.
	* @default "css, less, sass, scss, stylus, styl"
	*/
	"css.syntaxes"?: string,

	/**
	* A comma-separated list of unit aliases, used in CSS abbreviation. Each alias should be defined as alias:unit_value.
	* @default "e:em, p:%, x:ex, r:rem"
	*/
	"css.unitAliases"?: string,

	/**
	* The list of properties whose values ​​must not contain units.
	* @default "z-index, line-height, opacity, font-weight, zoom"
	*/
	"css.unitlessProperties"?: string,

	/**
	* Defines a symbol that should be placed between CSS property and value when expanding CSS abbreviations.
	* @default ":"
	*/
	"css.valueSeparator"?: string,

	/**
	* A comma-separated list of CSS properties that may have webkit vendor prefix. This list is used to generate a list of prefixed properties when expanding -property abbreviations. Empty list means that all possible CSS values may have webkit prefix.
	* @default "animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-clip, background-composite, background-origin, background-size, border-fit, border-horizontal-spacing, border-image, border-vertical-spacing, box-align, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-reflect, box-shadow, color-correction, column-break-after, column-break-before, column-break-inside, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, dashboard-region, font-smoothing, highlight, hyphenate-character, hyphenate-limit-after, hyphenate-limit-before, hyphens, line-box-contain, line-break, line-clamp, locale, margin-before-collapse, margin-after-collapse, marquee-direction, marquee-increment, marquee-repetition, marquee-style, mask-attachment, mask-box-image, mask-box-image-outset, mask-box-image-repeat, mask-box-image-slice, mask-box-image-source, mask-box-image-width, mask-clip, mask-composite, mask-image, mask-origin, mask-position, mask-repeat, mask-size, nbsp-mode, perspective, perspective-origin, rtl-ordering, text-combine, text-decorations-in-effect, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-fill-color, text-orientation, text-security, text-stroke-color, text-stroke-width, transform, transition, transform-origin, transform-style, transition-delay, transition-duration, transition-property, transition-timing-function, user-drag, user-modify, user-select, writing-mode, svg-shadow, box-sizing, border-radius"
	*/
	"css.webkitProperties"?: string,

	/**
	* A comma-separated list of additional CSS properties for css.webkitPreperties preference. You should use this list if you want to add or remove a few CSS properties to original set. To add a new property, simply write its name, to remove it, precede property with hyphen.For example, to add foo property and remove border-radius one, the preference value will look like this: foo, -border-radius.
	* @default ""
	*/
	"css.webkitPropertiesAddon"?: string,

	/**
	* A definition of comment that should be placed after matched element when comment filter is applied. This definition is an ERB-style template passed to _.template() function (see Underscore.js docs for details). In template context, the following properties and functions are availabe:
	attr(name, before, after) – a function that outputsspecified attribute value concatenated with before and after strings. If attribute doesn't exists, the empty string will be returned.node – current node (instance of AbbreviationNode)name – name of current tagpadding – current string padding, can be used for formatting
	* @default ""

	*/
	"filter.commentAfter"?: string,

	/**
	* A definition of comment that should be placed before matched element when comment filter is applied. For more info, read description of filter.commentAfter property
	* @default ""
	*/
	"filter.commentBefore"?: string,

	/**
	* A comma-separated list of attribute names that should exist in abbreviatoin where comment should be added. If you wish to add comment for every element, set this option to *
	* @default "id, class"
	*/
	"filter.commentTrigger"?: string,

	/**
	* Regular expression used to remove list markers (numbers, dashes, bullets, etc.) in t (trim) filter. The trim filter is useful for wrapping with abbreviation lists, pased from other documents (for example, Word documents).
	* @default "[\s|\u00a0]*[\d|#|\-|*|\u2022]+\.?\s*"
	*/
	"filter.trimRegexp"?: string,

	/**
	* A comma-separated list of tag names that should always get inner indentation.
	* @default "body"
	*/
	"format.forceIndentationForTags"?: string,

	/**
	* A comma-separated list of tag names that should not get inner indentation.
	* @default "html"
	*/
	"format.noIndentTags"?: string,

	/**
	* Enables or disables automatic URL recognition when wrapping text with <a> tag. With this option enabled,		if wrapped text matches URL or e-mail pattern it will be automatically		inserted into href attribute.
	* @default true
	*/
	"href.autodetect"?: boolean,

	/**
	* RegExp pattern to match wrapped e-mails. Unlike href.urlPattern, wrapped content will be prefixed with mailto: in href		attribute
	* @default "^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,5}$"
	*/
	"href.emailPattern"?: string,

	/**
	* RegExp pattern to match wrapped URLs. Matched content will be inserts as-is into href attribute, only whitespace will be trimmed.
	* @default "^(?:(?:https?|ftp|file)://|www\.|ftp\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])"
	*/
	"href.urlPattern"?: string,

	/**
	* Same as css.autoInsertVendorPrefixes but for LESS syntax
	* @default false
	*/
	"less.autoInsertVendorPrefixes"?: string,

	/**
	* Default language of generated dummy text. Currently, en and ru are supported, but users can add their own syntaxes		see docs.
	* @default "en"
	*/
	"lorem.defaultLang"?: string,

	/**
	* Omit commonly used part (e.g. “Lorem ipsum dolor sit amet“) from generated text.
	* @default false
	*/
	"lorem.omitCommonPart"?: boolean,

	/**
	* This option can be used to globally disable compact form of boolean attribues (attributes where name and value are equal). With compactform enabled, HTML tags can be outputted as <div contenteditable> instead of <div contenteditable="contenteditable">
	* @default true
	*/
	"profile.allowCompactBoolean"?: boolean,

	/**
	* A regular expression for attributes that should be boolean by default.If attribute name matches this expression, you don’t have to write dot after attribute name in Emmet abbreviation to mark it as boolean.
	* @default "^contenteditable|seamless$"
	*/
	"profile.booleanAttributes"?: string,

	/**
	* Same as css.autoInsertVendorPrefixes but for SASS syntax
	* @default false
	*/
	"sass.autoInsertVendorPrefixes"?: boolean,

	/**
	* Defines a symbol that should be placed at the end of CSS property  when expanding CSS abbreviations in SASS dialect.
	* @default ""
	*/
	"sass.propertyEnd"?: string,

	/**
	* Same as css.autoInsertVendorPrefixes but for SCSS syntax
	* @default false
	*/
	"scss.autoInsertVendorPrefixes"?: boolean,

	/**
	* Defines how attributes will be wrapped:none – no wrapping;round — wrap attributes with round braces;square — wrap attributes with round braces;curly — wrap attributes with curly braces.
	* @default "none"
	*/
	"slim.attributesWrapper"?: string,

	/**
	* Same as css.autoInsertVendorPrefixes but for Stylus syntax
	* @default false
	*/
	"stylus.autoInsertVendorPrefixes"?: boolean,

	/**
	* Defines a symbol that should be placed at the end of CSS property  when expanding CSS abbreviations in Stylus dialect.
	* @default ""
	*/
	"stylus.propertyEnd"?: string,

	/**
	* Defines a symbol that should be placed between CSS property and value when expanding CSS abbreviations in Stylus dialect.
	* @default ""
	*/
	"stylus.valueSeparator"?: string
}